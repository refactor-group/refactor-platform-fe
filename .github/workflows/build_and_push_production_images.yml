name: Build and Push Production Images
# Builds the frontend into production containers for release and pushes to GitHub Container Registry with stable tag

permissions:
  contents: read       # Default to read-only permissions for all jobs
on:
  release:
    types: [released]  # This workflow only runs when a new GitHub release is *actually* released publicly
  workflow_dispatch:   # Also allows manual triggering from GitHub UI

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # Repository path for the image

jobs:
  build_test_run:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4      # Checkout the repository code
      - name: Set up Node.js
        uses: actions/setup-node@v3    # Set up Node.js environment
        with:
          node-version: 21.x           # Using Node.js 21.x as in the regular CI workflow
          cache: 'npm'                 # Enable npm caching for faster builds

      - name: Install dependencies
        run: npm run ci                 # Clean Install of dependencies
      - name: Run build
        run: npm run build --if-present # Build the Next.js application
      
      # TODO Uncomment when tests are implemented
      # - name: Run tests
      #   run: npm test                # Run tests when they are implemented

  build_and_push_docker:
    runs-on: ubuntu-24.04
    needs: build_test_run
    permissions:
      contents: read                   # Read repository contents
      packages: write                  # Write to GitHub Packages
      attestations: write             # Allow attestation creation
      id-token: write                 # Required for OIDC signing

    steps:
      - uses: actions/checkout@v4      # Checkout code for the Docker build

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2  # Set up QEMU for multi-architecture builds
        with:
          platforms: linux/amd64,linux/arm64  # Build for both Intel/AMD and ARM architectures

      - name: Docker login
        uses: docker/login-action@v2   # Log in to GitHub Container Registry
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-buildx-action@v3  # Set up Docker Buildx
        with:
          install: true                # Install Buildx

      - name: Show Docker Build Cache (Before)
        run: |                         # Display cache info before build
          echo "🔍 Checking buildx cache BEFORE build..."
          docker buildx du || echo "No cache found yet."

      # Compute stable tag for production image
      - name: Determine Image Tags
        id: tags                       # Set output ID for this step
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository }}"
          echo "frontend_tags=$IMAGE_NAME:stable" >> $GITHUB_OUTPUT  # Tag image as "stable"
          echo "frontend_image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Build + Push Frontend
        id: push_frontend              # Set ID for this step to reference outputs
        uses: docker/build-push-action@v5
        with:
          context: .                   # Build context is repository root
          file: ./Dockerfile           # Use the Dockerfile at repository root
          target: runner               # Use the runner stage from the Dockerfile
          platforms: linux/amd64,linux/arm64  # Multi-architecture build
          push: true                   # Push image to registry
          provenance: true             # Enable provenance metadata
          sbom: true                   # Generate Software Bill of Materials
          build-args: |                # Environment variables for the build
            NEXT_PUBLIC_BACKEND_SERVICE_PROTOCOL=${{ vars.BACKEND_SERVICE_PROTOCOL }}
            NEXT_PUBLIC_BACKEND_SERVICE_HOST=${{ vars.BACKEND_SERVICE_HOST }}
            NEXT_PUBLIC_BACKEND_SERVICE_PORT=${{ vars.BACKEND_SERVICE_PORT }}
            NEXT_PUBLIC_BACKEND_SERVICE_API_PATH=${{ vars.BACKEND_SERVICE_API_PATH }}
            NEXT_PUBLIC_BACKEND_API_VERSION=${{ vars.BACKEND_API_VERSION }}
            FRONTEND_SERVICE_PORT=${{ vars.FRONTEND_SERVICE_PORT }}
            FRONTEND_SERVICE_INTERFACE=${{ vars.FRONTEND_SERVICE_INTERFACE }}
          tags: ${{ steps.tags.outputs.frontend_tags }}  # Use "stable" tag from previous step
          cache-from: type=gha         # Use GitHub Actions cache
          cache-to: type=gha,mode=max  # Cache for future builds

      - name: Show Docker Build Cache (After)
        run: |                         # Display cache info after build
          echo "📦 Checking buildx cache AFTER build..."
          docker buildx du || echo "Failed to get updated cache info."

      # Install Cosign for image signing
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      # Sign the container image
      - name: Sign image with Cosign
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ${{ steps.tags.outputs.frontend_image_name }}:stable

      # Attest build provenance
      - name: Attest Frontend
        if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'  # Only attest on release or manual trigger
        uses: actions/attest-build-provenance@v2  # Use GitHub attestation action
        with:
          subject-name: ${{ steps.tags.outputs.frontend_image_name }}  # Image name to attest
          subject-digest: ${{ steps.push_frontend.outputs.digest }}    # Image digest to attest
          push-to-registry: true                                       # Push attestation to registry

      - name: Print Usage Instructions
        run: |                         # Print usage instructions
          echo "Frontend Image Pushed to ghcr.io as STABLE:"
          echo "  docker pull ${{ steps.tags.outputs.frontend_image_name }}:stable"
          echo "Run it locally:"
          echo "  docker run --rm --env-file .env -p 3000:3000 ${{ steps.tags.outputs.frontend_image_name }}:stable"
          echo "Verify signature:"
          echo "  cosign verify ${{ steps.tags.outputs.frontend_image_name }}:stable"