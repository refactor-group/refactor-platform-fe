name: Build and Push Non-Production Images

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  ORG_NAME: refactor-group
  REPO_NAME: refactor-platform-fe

jobs:
  build_and_push_amd64:
    runs-on: ubuntu-22.04

    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tag
        id: vars
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}
          IMAGE_BASE="${{ env.REGISTRY }}/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}/${BRANCH_NAME}"
          echo "tag=${IMAGE_BASE}:amd64" >> $GITHUB_OUTPUT
          echo "multiarch=${IMAGE_BASE}:latest" >> $GITHUB_OUTPUT

      - name: Build + Push AMD64
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: runner
          platforms: linux/amd64
          push: true
          provenance: true
          sbom: true
          build-args: |
            NEXT_PUBLIC_BACKEND_SERVICE_PROTOCOL=${{ secrets.BACKEND_SERVICE_PROTOCOL }}
            NEXT_PUBLIC_BACKEND_SERVICE_HOST=${{ secrets.BACKEND_SERVICE_HOST }}
            NEXT_PUBLIC_BACKEND_SERVICE_PORT=${{ secrets.BACKEND_PORT }}
            NEXT_PUBLIC_BACKEND_API_VERSION=${{ secrets.BACKEND_API_VERSION }}
            FRONTEND_SERVICE_PORT=${{ secrets.FRONTEND_SERVICE_PORT }}
            FRONTEND_SERVICE_INTERFACE=${{ secrets.FRONTEND_SERVICE_INTERFACE }}
          tags: ${{ steps.vars.outputs.tag }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64

  build_and_push_arm64:
    runs-on: ubuntu-22.04

    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tag
        id: vars
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}
          IMAGE_BASE="${{ env.REGISTRY }}/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}/${BRANCH_NAME}"
          echo "tag=${IMAGE_BASE}:arm64" >> $GITHUB_OUTPUT
          echo "multiarch=${IMAGE_BASE}:latest" >> $GITHUB_OUTPUT

      - name: Build + Push ARM64
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: runner
          platforms: linux/arm64
          push: true
          provenance: true
          sbom: true
          build-args: |
            NEXT_PUBLIC_BACKEND_SERVICE_PROTOCOL=${{ secrets.BACKEND_SERVICE_PROTOCOL }}
            NEXT_PUBLIC_BACKEND_SERVICE_HOST=${{ secrets.BACKEND_SERVICE_HOST }}
            NEXT_PUBLIC_BACKEND_SERVICE_PORT=${{ secrets.BACKEND_PORT }}
            NEXT_PUBLIC_BACKEND_API_VERSION=${{ secrets.BACKEND_API_VERSION }}
            FRONTEND_SERVICE_PORT=${{ secrets.FRONTEND_SERVICE_PORT }}
            FRONTEND_SERVICE_INTERFACE=${{ secrets.FRONTEND_SERVICE_INTERFACE }}
          tags: ${{ steps.vars.outputs.tag }}
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64

  create_multiarch_manifest:
    runs-on: ubuntu-22.04
    needs: [build_and_push_amd64, build_and_push_arm64]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image digests
        id: vars
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}
          IMAGE_BASE="${{ env.REGISTRY }}/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}/${BRANCH_NAME}"
          echo "multiarch=${IMAGE_BASE}:latest" >> $GITHUB_OUTPUT
          echo "amd64=${IMAGE_BASE}@${{ needs.build_and_push_amd64.outputs.digest }}" >> $GITHUB_OUTPUT
          echo "arm64=${IMAGE_BASE}@${{ needs.build_and_push_arm64.outputs.digest }}" >> $GITHUB_OUTPUT

      - name: Create and Push Multi-Arch Manifest
        run: |
          docker manifest create ${{ steps.vars.outputs.multiarch }} \
            --amend ${{ steps.vars.outputs.amd64 }} \
            --amend ${{ steps.vars.outputs.arm64 }}

          docker manifest push ${{ steps.vars.outputs.multiarch }}

  sign_and_print:
    runs-on: ubuntu-22.04
    needs: create_multiarch_manifest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tag
        id: vars
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}
          IMAGE="${{ env.REGISTRY }}/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}/${BRANCH_NAME}:latest"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign image with Cosign
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ${{ steps.vars.outputs.image }}

      - name: Print Pull & Run Instructions
        run: |
          echo -e "\033[1;32mFrontend Multi-Arch Image Pushed & Signed:\033[0m"
          echo "  docker pull ${{ steps.vars.outputs.image }}"
          echo ""
          echo -e "\033[1;36mRun locally or with Compose:\033[0m"
          echo "  docker run --rm --env-file .env -p 3000:3000 ${{ steps.vars.outputs.image }}"
          echo ""
          echo -e "\033[1;33mSignature Verification:\033[0m"
          echo "  cosign verify ${{ steps.vars.outputs.image }}"
